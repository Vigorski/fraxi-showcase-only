//Function for grid
//Mixin create row
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div($grid-gutter-width, -2);
  margin-left: math.div($grid-gutter-width, -2);
}

//Mixin change gutters
@mixin change-gutters($grid-size: $grid-gutter-width) {
  margin-right: math.div($grid-size, -2);
  margin-left: math.div($grid-size, -2);

  > .col,
  > [class*="col-"] {
    padding-right: math.div($grid-size, 2);
    padding-left: math.div($grid-size, 2);
  }
}

//Mixin container create container fluid
@mixin make-container() {
  width: 100%;
  padding-right: calc($grid-gutter-width);
  padding-left: calc($grid-gutter-width);
  margin-right: auto;
  margin-left: auto;
}

//Mixin create grid column
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage(math.div($size, $columns));
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage(math.div($size, $columns));
}

//Mixin create grid col offset
@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num==0, 0, percentage($num));
}


//Mixin for create grid columns
@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints
) {
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-right: math.div($gutter, 2);
    padding-left: math.div($gutter, 2);
  }

  // Percentage based grid    
  @each $grid-label, $grid-value in ($grid-percentages) {
    .col-perc-#{$grid-label} {
      @extend %grid-column;
      flex: 0 0 $grid-value;
      max-width: $grid-value;
    }
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not($infix== "" and $i==0) {
          // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}